services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=15d
      - --web.enable-lifecycle
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - node-exporter
      - cadvisor
      - blackbox
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/ready >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9093/-/ready >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3300:3000"   # avoid conflict with Homepage on 3000
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/login >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    pid: host
    network_mode: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9100/metrics >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/ >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./config/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    command: ["--config.file=/etc/blackbox_exporter/config.yml"]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9115/metrics >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      com.watchdog.enable: "true"
      com.watchdog.role: "monitoring"

  watchdog:
    build: ./watchdog
    container_name: monitoring-watchdog
    environment:
      - HOST=192.168.2.51
      - GRAFANA_PORT=3300
      - SLEEP_SEC=120
      - LOOP=1
      - STACK_DIR=/app/stack
      - SMOKE=/app/stack/monitoring_smoke_test.py
      # Option 1: manage explicit list
      - CONTAINERS=prometheus,grafana,alertmanager,cadvisor,blackbox,node-exporter
      # Option 2: discover by label (uncomment, and remove CONTAINERS= above)
      # - LABEL_FILTER=com.watchdog.enable=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/app/stack:ro
    restart: unless-stopped
    depends_on:
      - prometheus
      - grafana
      - alertmanager
      - cadvisor
      - blackbox

volumes:
  prometheus_data:
  alertmanager_data:
  grafana_data:
